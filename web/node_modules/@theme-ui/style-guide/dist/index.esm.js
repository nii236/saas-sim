import Color from 'color';
import { useThemeUI, jsx, get } from 'theme-ui';

var useTheme = function useTheme() {
  return useThemeUI().theme;
};

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var Card = function Card(props) {
  return jsx("div", _extends({}, props, {
    sx: {
      variant: 'styles.Card'
    }
  }));
};

var TypeStyle = function TypeStyle(_ref) {
  var _ref$fontSize = _ref.fontSize,
      fontSize = _ref$fontSize === void 0 ? 5 : _ref$fontSize,
      _ref$fontFamily = _ref.fontFamily,
      fontFamily = _ref$fontFamily === void 0 ? 'body' : _ref$fontFamily,
      _ref$lineHeight = _ref.lineHeight,
      lineHeight = _ref$lineHeight === void 0 ? 'body' : _ref$lineHeight,
      _ref$fontWeight = _ref.fontWeight,
      fontWeight = _ref$fontWeight === void 0 ? 'body' : _ref$fontWeight,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? 'Aa' : _ref$children,
      _ref$truncate = _ref.truncate,
      truncate = _ref$truncate === void 0 ? true : _ref$truncate,
      props = _objectWithoutProperties(_ref, ["fontSize", "fontFamily", "lineHeight", "fontWeight", "children", "truncate"]);

  return jsx(Card, _extends({}, props, {
    children: children,
    sx: _objectSpread2({
      fontFamily: fontFamily,
      fontSize: fontSize,
      lineHeight: lineHeight,
      fontWeight: fontWeight
    }, truncate ? {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    } : {})
  }));
};

var getValue = function getValue(fontSizes, key) {
  var raw = fontSizes[key];
  if (typeof raw !== 'number') { return raw; }
  return raw + 'px';
};

var TypeScale = function TypeScale(_ref) {
  var _ref$reverse = _ref.reverse,
      reverse = _ref$reverse === void 0 ? true : _ref$reverse,
      props = _objectWithoutProperties(_ref, ["reverse"]);

  var _useTheme = useTheme(),
      _useTheme$fontSizes = _useTheme.fontSizes,
      fontSizes = _useTheme$fontSizes === void 0 ? [] : _useTheme$fontSizes;

  return jsx("div", {
    sx: {
      display: 'flex',
      flexWrap: 'wrap',
      alignItems: 'baseline'
    }
  }, fontSizes.map(function (n, i) {
    var key = reverse ? fontSizes.length - 1 - i : i;
    return jsx(TypeStyle, _extends({
      key: i,
      fontSize: key,
      sx: {
        mr: 3
      },
      children: getValue(fontSizes, key)
    }, props));
  }));
};

var HeadingStyle = function HeadingStyle(props) {
  return jsx(TypeStyle, _extends({
    fontFamily: "heading",
    fontWeight: "heading",
    lineHeight: "heading"
  }, props));
};

var FontFamily = function FontFamily(_ref) {
  var name = _ref.name;

  var _useTheme = useTheme(),
      fonts = _useTheme.fonts;

  return get(fonts, name);
};

var toHex = function toHex(raw) {
  try {
    return Color(raw).hex();
  } catch (e) {
    return;
  }
};

var ColorSwatch = function ColorSwatch(_ref) {
  var color = _ref.color,
      name = _ref.name,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 128 : _ref$size,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? true : _ref$label,
      props = _objectWithoutProperties(_ref, ["color", "name", "size", "label"]);

  var _useTheme = useTheme(),
      colors = _useTheme.colors;

  var value = get(colors, color);
  return jsx("div", _extends({}, props, {
    title: "".concat(toHex(value))
  }), jsx("div", {
    sx: {
      width: size,
      height: size,
      bg: color
    }
  }), label && jsx("div", {
    sx: {
      py: 2
    }
  }, name || color));
};

var join = function join() {
  var arguments$1 = arguments;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments$1[_key];
  }

  return args.filter(Boolean).join('.');
};

var ColorRow = function ColorRow(_ref) {
  var colors = _ref.colors,
      name = _ref.name,
      _ref$omit = _ref.omit,
      omit = _ref$omit === void 0 ? ['modes'] : _ref$omit,
      render = _ref.render,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, ["colors", "name", "omit", "render", "size"]);

  return jsx("div", null, jsx("div", {
    sx: {
      fontSize: 0,
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, Object.keys(colors).map(function (key) {
    var color = colors[key];
    if (!color || omit.includes(key)) { return false; }
    var id = join(name, key);

    if (_typeof(color) === 'object') {
      return jsx(ColorRow, _extends({}, props, {
        key: key,
        name: id,
        colors: color,
        omit: omit
      }));
    }

    var swatch = jsx(ColorSwatch, _extends({}, props, {
      name: id,
      color: id,
      size: size,
      sx: {
        m: 2
      }
    }));

    if (typeof render === 'function') {
      return render({
        swatch: swatch,
        color: color,
        key: key,
        name: id
      });
    }

    return swatch;
  })));
};
var ColorPalette = function ColorPalette(_ref2) {
  var omit = _ref2.omit,
      mode = _ref2.mode,
      props = _objectWithoutProperties(_ref2, ["omit", "mode"]);

  var theme = useTheme();
  var colors = theme.colors;

  if (mode && colors.modes) {
    colors = colors.modes[mode] || colors;
  }

  return jsx("div", {
    style: {
      marginLeft: -8,
      marginRight: -8
    }
  }, jsx(ColorRow, _extends({}, props, {
    omit: omit,
    colors: colors
  })));
};

var ThemeCard = function ThemeCard(props) {
  var _useThemeUI = useThemeUI();

  return jsx(Card, _extends({}, props, {
    sx: {
      color: 'text',
      bg: 'background'
    }
  }), jsx(TypeStyle, null), jsx(ColorPalette, {
    label: false,
    size: 32
  }));
};

export { useTheme, TypeStyle, TypeScale, HeadingStyle, FontFamily, ColorSwatch, ColorPalette, ThemeCard };
//# sourceMappingURL=index.esm.js.map
