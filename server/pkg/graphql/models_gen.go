// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"boilerplate/pkg/db"
	"fmt"
	"io"
	"strconv"
)

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type TodoConnection struct {
	Edges    []*TodoEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type TodoEdge struct {
	Cursor string   `json:"cursor"`
	Node   *db.Todo `json:"node"`
}

type Viewer struct {
	Me    *db.User   `json:"me"`
	Todos []*db.Todo `json:"todos"`
}

type Role string

const (
	RoleAdmin  Role = "ADMIN"
	RoleMember Role = "MEMBER"
	RoleGuest  Role = "GUEST"
)

var AllRole = []Role{
	RoleAdmin,
	RoleMember,
	RoleGuest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleMember, RoleGuest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
